/**
 * <p>A class representing a Commission Programmer.</p>
 *
 * <p>File name: CommissionProgrammer.java </p>
 * <p>Author: Ben Nguyen </p>
 * <p>Purpose: Commission Programmer, which is a type of Programmer that </p>
 * <p>receives a commission based on sales</p>
 */
public class CommissionProgrammer extends Programmer { 

private double grossSales; // gross weekly sales
private double commissionRate; // commission percentage

/**
 * Creates a CommissionProgrammer object with the given security level.
 *
 * @param securityLevel The security clearance level of the programmer.
 */
public CommissionProgrammer(SecurityClearance.ClearanceLevel securityLevel) {
    super(securityLevel); // Call the constructor of the superclass
}

/**
 * Creates a CommissionProgrammer object with the specified details.
 *
 * @param firstName           The first name of the programmer.
 * @param lastName            The last name of the programmer.
 * @param socialSecurityNumber The social security number of the programmer.
 * @param grossSales          The gross sales amount generated by the programmer.
 * @param commissionRate      The commission rate for the programmer.
 * @throws IllegalArgumentException if the commission rate is not in the range between 0.0 and 1.0 or if gross sales is negative.
 */
public CommissionProgrammer(String firstName, String lastName, 
String socialSecurityNumber, double grossSales, double commissionRate) {
super(firstName, lastName, socialSecurityNumber);

if (commissionRate <= 0.0 || commissionRate >= 1.0) { // validate 
  throw new IllegalArgumentException(
     "Commission rate must be > 0.0 and < 1.0");
}

if (grossSales < 0.0) { // validate
  throw new IllegalArgumentException("Gross sales must be >= 0.0");
}

this.grossSales = grossSales;
this.commissionRate = commissionRate;
} 

/**
 * Sets the gross sales amount for the programmer.
 *
 * @param grossSales The new gross sales amount.
 * @throws IllegalArgumentException if the gross sales is negative.
 */
public void setGrossSales(double grossSales) {
if (grossSales < 0.0) { // validate
  throw new IllegalArgumentException("Gross sales must be >= 0.0");
}

this.grossSales = grossSales;
} 

/**
 * Returns the gross sales amount of the programmer.
 *
 * @return The gross sales amount.
 */
public double getGrossSales() {
return grossSales;
} 

/**
 * Sets the commission rate for the programmer.
 *
 * @param commissionRate The new commission rate.
 * @throws IllegalArgumentException if the commission rate is not in the range (0.0, 1.0).
 */
public void setCommissionRate(double commissionRate) {
if (commissionRate <= 0.0 || commissionRate >= 1.0) { // validate
  throw new IllegalArgumentException(
     "Commission rate must be > 0.0 and < 1.0");
}

this.commissionRate = commissionRate;
} 

/**
 * Returns the commission rate of the programmer.
 *
 * @return The commission rate.
 */
public double getCommissionRate() {
return commissionRate;
} 

/**
 * Calculates and returns the payment amount for the programmer.
 * 
 * @return The total payment amount, including commission and base salary.
 */
@Override                                                           
public double getPaymentAmount() {                                            
return getCommissionRate() * getGrossSales();                    
}                                             

/**
 * Returns a String representation of the CommissionProgrammer object.
 *
 * @return A String containing details of the programmer, including gross sales and commission rate.
 */
@Override      
public String toString() {
     return "commission programmer: " + super.toString() + String.format("gross sales: $%,.2f; commission rate: %.2f",
    	        getGrossSales(), getCommissionRate()
    		 );
}                    
}
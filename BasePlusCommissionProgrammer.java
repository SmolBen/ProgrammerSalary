/**
 * <p>A class representing a Base Plus Commission Programmer.</p>
 *
 * <p>File name: BasePlusCommissionProgrammer.java </p>
 * <p>Author: Ben Nguyen </p>
 * <p>Purpose: Represents a Base Plus Commission Programmer, which is a type of Programmer that </p>
 * <p>receives a base salary in addition to a commission based on sales</p>
 */
public class BasePlusCommissionProgrammer extends CommissionProgrammer { 

private double baseSalary; // base salary per week

/**
 * Creates a BasePlusCommissionProgrammer object with the given security level.
 *
 * @param securityLevel The security clearance level of the programmer.
 */
public BasePlusCommissionProgrammer(SecurityClearance.ClearanceLevel securityLevel) {
    super(securityLevel); // Call the constructor of the superclass
}

/**
 * Creates a BasePlusCommissionProgrammer object with the specified details.
 *
 * @param firstName          The first name of the programmer.
 * @param lastName           The last name of the programmer.
 * @param socialSecurityNumber The social security number of the programmer.
 * @param grossSales         The gross sales amount generated by the programmer.
 * @param commissionRate     The commission rate for the programmer.
 * @param baseSalary         The base salary per week for the programmer.
 * @throws IllegalArgumentException if the base salary is less than 0.0.
 */
public BasePlusCommissionProgrammer(String firstName, String lastName, 
String socialSecurityNumber, double grossSales, double commissionRate, double baseSalary) {
super(firstName, lastName, socialSecurityNumber, grossSales, commissionRate);

if (baseSalary < 0.0) { // validate baseSalary                  
  throw new IllegalArgumentException("Base salary must be >= 0.0");
}

this.baseSalary = baseSalary;                
}

/**
 * Sets the base salary for the programmer.
 *
 * @param baseSalary The new base salary per week.
 * @throws IllegalArgumentException if the base salary is less than 0.0.
 */
public void setBaseSalary(double baseSalary) {
if (baseSalary < 0.0) { // validate baseSalary                  
  throw new IllegalArgumentException("Base salary must be >= 0.0");
}

this.baseSalary = baseSalary;                
} 

/**
 * Returns the base salary of the programmer.
 *
 * @return The base salary per week.
 */
public double getBaseSalary() {
return baseSalary;
}

/**
 * Calculates and returns the payment amount for the programmer.
 *
 * @return The total payment amount, including commission and base salary.
 */
@Override                                                        
public double getPaymentAmount() {                                             
return getBaseSalary() + super.getPaymentAmount();                        
} 

/**
 * Returns a String representation of the BasePlusCommissionProgrammer object.
 *
 * @return A String containing details of the programmer, including base salary.
 */
@Override
public String toString() {
return "base-plus " + super.toString() + String.format("; base salary: $%,.2f", getBaseSalary());
}  
}



